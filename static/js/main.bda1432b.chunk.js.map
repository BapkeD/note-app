{"version":3,"sources":["componets/Note.js","componets/AddNote.js","componets/NoteList.js","componets/search.js","componets/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Note","_ref","id","text","date","handleDeleteNote","React","createElement","className","MdDeleteForever","onClick","size","AddNote","handleAddNote","_useState","useState","_useState2","_slicedToArray","noteText","setNoteText","concat","length","placeholder","value","rows","cols","onChange","event","target","trim","disabled","NoteList","notes","map","note","key","Search","handleSearchNote","MdSearch","type","Header","handleToggleDarkMode","previousDarkMode","App","setNotes","_useState3","_useState4","searchText","setSearchText","_useState5","_useState6","darkMode","setDarkMode","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","filter","toLowerCase","includes","newNotes","Date","newNote","nanoid","toLocaleDateString","_toConsumableArray","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bda1432b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {MdDeleteForever} from 'react-icons/md';\r\n\r\nconst Note = ({id, text, date, handleDeleteNote}) => {\r\n    return(\r\n        <div className='note'>\r\n            <span>{text}</span>\r\n            <div className=\"note-footer\">\r\n                <small>{date}</small>\r\n                <MdDeleteForever onClick={() => handleDeleteNote(id)} className='delete-icon' size='1.3em' />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Note;\r\n","import React, { useState } from 'react';\r\n\r\nconst AddNote = ({handleAddNote}) => {\r\n    const [noteText, setNoteText] = useState('');\r\n    const characterLimit = 200;\r\n\r\n    const handleChange = (event) => {\r\n        if (characterLimit - event.target.value.length >= 0){\r\n            setNoteText(event.target.value);\r\n        }\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if(noteText.trim().length > 0){\r\n            handleAddNote(noteText);\r\n            setNoteText('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`addnote ${characterLimit - noteText.length === 0 ? 'note-limit-reached' : ''}`}>\r\n            <textarea\r\n                className=\"addnote-textarea\"\r\n                placeholder=\"type to add a note...\"\r\n                value={noteText}\r\n                rows='8'\r\n                cols='8'\r\n                onChange={handleChange}\r\n            ></textarea>\r\n            <div className=\"note-footer\">\r\n                <small>{characterLimit - noteText.length} Remaining</small>\r\n                <button \r\n                    onClick={handleSaveClick} \r\n                    className=\"savebutton\"\r\n                    disabled={characterLimit - noteText.length === 0}\r\n                >\r\n                    Add Note!\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddNote;\r\n","import React from 'react';\r\nimport Note from './Note';\r\nimport AddNote from './AddNote';\r\n\r\nconst NoteList = ({ notes, handleAddNote, handleDeleteNote }) => {\r\n    return (\r\n        <div className='note-list'>\r\n            {notes.map((note)=>(\r\n                <Note\r\n                 key={note.id}\r\n                 id={note.id}\r\n                 text={note.text}\r\n                 date={note.date}\r\n                 handleDeleteNote={handleDeleteNote}\r\n                 />\r\n            ))}\r\n            <AddNote handleAddNote={handleAddNote} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteList;\r\n","import React from \"react\";\r\nimport { MdSearch } from \"react-icons/md\";\r\n\r\nconst  Search = ({handleSearchNote}) => {\r\n    return( <div className=\"search\">\r\n        <MdSearch className=\"search-icons\" size='1.3em'/>\r\n        <input onChange={(event)=>handleSearchNote(event.target.value)}type=\"text\" placeholder=\"Search\"/>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react'; \r\n\r\nconst Header = ({handleToggleDarkMode}) => {\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>Notes</h1>\r\n            <button onClick={()=>\r\n             handleToggleDarkMode(\r\n                (previousDarkMode) => !previousDarkMode\r\n            )\r\n            } \r\n        className=\"toggle-button\">toggle mode</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport NoteList from './componets/NoteList';\nimport { nanoid } from 'nanoid';\nimport Search from './componets/search';\nimport Header from './componets/Header';\n\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [searchText, setSearchText] = useState('');\n    const [darkMode, setDarkMode] = useState(false);\n\n    useEffect(() => {\n\t\tconst savedNotes = JSON.parse(\n\t\t\tlocalStorage.getItem('react-notes-app-data')\n\t\t);\n\n\t\tif (savedNotes) {\n\t\t\tsetNotes(savedNotes);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\n\t\t\t'react-notes-app-data',\n\t\t\tJSON.stringify(notes)\n\t\t);\n\t}, [notes]);\n    \n    \n\n    const addNote = (text) => {\n        const date = new Date();\n        const newNote = {\n            text: text, \n            id: nanoid(),\n            date: date.toLocaleDateString()\n         }\n         const newNotes = [...notes, newNote];\n         setNotes(newNotes);\n    };\n\n    const deleteNote = (id) => {\n       const newNotes = notes.filter((note) => note.id !== id);\n       setNotes(newNotes);\n    };\n\n    return (\n        <div className={`${darkMode && 'darkMode'}`}>\n            <div className='container'>\n                <Header handleToggleDarkMode={setDarkMode} />\n                <Search handleSearchNote={setSearchText}  />\n                <NoteList\n                    notes={notes.filter((note)=> note.text.toLowerCase().includes(searchText)\n                    )}\n                    handleDeleteNote={deleteNote}\n                    handleAddNote={addNote} />\n            </div>\n        </div>\n    );\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}